#!/bin/bash 
#!usr/bin/awk

# a script (ilsresc_osg ) that will present resources information 
# in a more friendly and convenient form for a Production Manager:

# ilsresc_org [-hqsml] [-g group_name][-r resc_name] [-G resourcegroup_name]
# -h/--help shows help
# no options - shows list of resources
# -g/--group -restricted to the resources that support this group
# -r/--resource -restricted to a specified resource
# -G/--resourcegroup -restricted to the resources this resource group
# "-q/--quota shows resource quota(available and used in MB)"
# -s/--status shows status of the resource
# -m/--meta shows resource metadata
# -l/--list shows complete information about resources


# Author: Yaling Zheng
# July 3, 2012

validflag=1
optionr=""
optiong=""
optionG=""
# we also define a list for the resourcegroup in the optionG
declare -a resourcesList4optionG
optionh=0
optionq=0
options=0
optionm=0
optionl=0
allparameters=$@
numparameters=$#

# group name can be None or a specific name
# while resource can be None, a specific resource, or a group of resources
# Here, We use a dictonary for the resources

function ReadArguments {
    local readinggroup_flag=0
    local readingresource_flag=0
    local readingresourcegroup_flag=0
    # $@ are all the parameters
    local index=0
    # echo all parameters $allparameters
    for ele in $allparameters
    do 
	if [ $readingresourcegroup_flag -eq 1 ]
	then
	    optionG=$ele
	    readingresourcegroup_flag=0
	    # echo option group is
	    # echo $optiong
	    index=$[ $index + 1 ]
	    continue
	fi
	if [ $readinggroup_flag -eq 1 ]
	then
	    optiong=$ele
	    readinggroup_flag=0
	    # echo option resource is
	    # echo $optionr
	    index=$[ $index + 1 ]
	    continue
	fi
	if [ $readingresource_flag -eq 1 ]
	then
	    optionr=$ele
	    readingresource_flag=0
	    # echo option resource is
	    # echo $optionr
	    index=$[ $index + 1 ]
	    continue
	fi
	case $ele in
	    "-h" | "--help") 
		optionh=1
		# echo option h exists ...
		;;
	    "-g" | "--group")
		pos_group=$[ $index + 2 ]
		if [ $pos_group -le $numparameters ]
		then
		    readinggroup_flag=1
		else
		    echo invalid options ...
		    validflag=0
		    break
		fi
		;;
	    "-G" | "--resourcegroup")
		pos_group=$[ $index + 2 ]
		if [ $pos_group -le $numparameters ]
		then
		    readingresourcegroup_flag=1
		else
		    echo invalid options ...
		    validflag=0
		    break
		fi
		;;
	    "-r" | "--resource")
		pos_resource=$[ $index + 2 ]
		if [ $pos_resource -le $numparameters ]
		then
		    readingresource_flag=1
		else
		    echo invalid options ...
		    validflag=0
		    break
		fi
		;;
	    "-q" | "--quota") # show quota
		optionq=1
		# echo option q exists ...
		;;
	    "-s" | "--status") # show status of the resource
		options=1
		# echo option s exists ...
		;;
	    "-m" | "--meta") # show resource metadata
		optionm=1
		# echo option m exists ...
		;;
	    "-l" | "--list") # show complete information about resources
		optionl=1
		# echo option l exists ...
		;;
	    *) # other case
	        # echo "other"
		;;
	esac
	index=$[ $index + 1 ]
    done 
    # optionq=1 means print quota_flag
    # options=1 means print status_flag 
    # optionm=1 means print surl and endpath
    # optiong is the group name
    # optionr is the resource name
    # optionG is the resource group name
    if [ $optionl -eq 1 ]
    then
	optionq=1
	options=1
	optionm=1
    fi
}

# Check the exclusive of the options
function printhelp {
    echo ilsresc_org [-hqsml] [-g group_name][-r resc_name] [-G resourcegroup_name]
    echo -h/--help shows help
    echo no options - shows list of resources
    echo -g/--group -restricted to the resources that support this group
    echo -r/--resource -restricted to a specified resource
    echo -G/--resourcegroup -restricted to the resources this resource group
    echo "-q/--quota shows resource quota(available and used in MB)"
    echo -s/--status shows status of the resource
    echo -m/--meta shows resource metadata
    echo -l/--list shows complete information about resources
}


declare -a GroupResourceQuotaList

function buildGroupResourceQuotaList {
    local groupname=""
    local reading_groupflag=0
    local resourcename=""
    local reading_resourceflag=0
    local reading_quotaflag=0
    local reading_overflag=0
    local quota=0
    local over=0
    local groupresourceindex=0
    for ele in `iquota`
    do
	if [ $reading_resourceflag -eq 1 ]
	then
	    resourcename=$ele
	    reading_resourceflag=0
	    continue
	fi
	if [ $reading_groupflag -eq 1 ]
	then    
	    groupname=$ele
	    reading_groupflag=0
	    continue
	fi
	if [ $reading_quotaflag -eq 1 ]
	then
	    quota=`echo ${ele//,/}`
	    reading_quotaflag=0
	    continue
	fi
	if [ $reading_overflag -eq 1 ]
	then
	    over=`echo ${ele//,/}`
	    reading_overflag=0
	    used=`expr $quota + $over`
	    MBquota=`expr $quota / 1048576`
	    MBused=`expr $used / 1048576`
	    GroupResourceQuotaList[$groupresourceindex]="$groupname.$resourcename.$quota.$MBquota.$used.$MBused"
	    groupresourceindex=$[ $groupresourceindex + 1 ]
	    continue
	fi
	case "$ele" in
	    "Resource:") 
		reading_resourceflag=1 
		;;
	    "Group:")
		reading_groupflag=1
		;;
	    "Quota:")
		reading_quotaflag=1
		;;
	    "Over:")
		reading_overflag=1
		;;
	    *)  	
		;;
	esac
    done
}

# after the following function, group resource is in the groupresourcelist

declare -a ResourceStatusList

function buildResourceStatusList {
    # the first parameter is the resource name
    # the resourcename is after "name:" 
    # the status is after "status"
    local reading_resourcename_flag=0
    local reading_status_flag=0
    local status=""
    local resourcestatusindex=0
    local resourcename
    for ele in `ilsr
esc -l`
    do
	if [ $reading_resourcename_flag -eq 1 ]
	then
	    resourcename=$ele
	    reading_resourcename_flag=0
	    continue
	fi
	if [ $reading_status_flag -eq 1 ]
	then
	    status=$ele
	    reading_status_flag=0
	    ResourceStatusList[$resourcestatusindex]="$resourcename.$status";
	    resourcestatusindex=$[ $resourcestatusindex + 1 ]
	    continue
	fi
	case "$ele" in
	    "name:")
		reading_resourcename_flag=1
		;;
	    "status:")
		reading_status_flag=1
		;;
            *)
		;;
	esac
    done
}

function getResourceStatus {
    local queryresourcename=$1
    # we already have ResourceStatusList
    local currentresourcestatus=""
    local oneresource
    # echo getResourceStatus $queryresourcename
    local currentresourcename
    for oneresource in ${ResourceStatusList[@]}
    do
	currentresourcename=`echo $oneresource | cut -d"." -f1`
	if [ "$currentresourcename" == "$queryresourcename" ]
	then
	    currentresourcestatus=`echo $oneresource | cut -d"." -f2`
	    break
	fi
    done
    echo Status: $currentresourcestatus
}

declare -a resourcemetainfo

function getResourceSURL {
    local resourcename=$1
    local gap=2
    local gapcounter=0
    local surlvalue=""
    # echo getResourceSURL $resourcename
    for item in `imeta ls -R $resourcename`
    do
	if [ $gapcounter -eq $gap ]
	then
	    surlvalue=$item
	    break
	fi
	if [ $gapcounter -eq 1 ]
	then
	    gapcounter=$[ $gapcounter + 1 ]
	fi
	if [ "$item" == "surl" ]
	then
	    gapcounter=1
	fi
    done
    echo "SURL: $surlvalue"
}

function getGroupResourceEndPath {
    local groupname=$1
    local resourcename=$2
    local EndPathvalue=""
    local gap=2
    local gapcounter=0
    # echo getResourceEndPath $groupname $resourcename
    for item in `imeta ls -R $resourcename`
    do
	if [ $gapcounter -eq $gap ]
	then
	    EndPathvalue=$item
	    break
	fi
	if [ $gapcounter -eq 1 ]
	then
	    gapcounter=$[ $gapcounter + 1 ]
	fi
	if [ "$item" == "$groupname" ]
	then
	    gapcounter=1
	fi
    done
    echo "EndPath:$EndPathvalue"
}

# build a dictionary for optionG
# if optionG is empty
# then the dictionary is empty
# otherwise for each resource in optionG
# its dicitonary value is 1

function buildoptionGList {
    local index=0
    local reading_a_resource=0
    if [ "$optionG" != "" ]
    then
	# build a dictionary
	for item in `ilsresc -l $optionG`
	do
	    if [ $reading_a_resource -eq 1 ]
	    then
		resourcesList4optionG[$index]="$item"
		index=$[ $index + 1 ]
		reading_a_resource=0
		continue
	    fi
	    if [ "$item" == "resource:" ]
	    then
		reading_a_resource=1
	    fi
	done
    fi
    if [ $index -gt 0 ]
    then
	echo resourcegroup: $optionG
	echo
    fi
}

optionGcontainsresource_flag=0

function ContainsResource {
    local TheResourceName=$1
    for item in ${resourcesList4optionG[@]}
    do
	if [ "$item" == "$TheResourceName" ]
	then
	    optionGcontainsresource_flag=1
	    return
	fi
    done
}

function main {
    local currentresourcename
    local currentgroupname
    ReadArguments
    if [ $validflag -eq 0 ] || [ $optionh -eq 1 ]
    then
	printhelp
	return
    fi

    buildGroupResourceQuotaList
    buildResourceStatusList
    buildoptionGList

    # for all the matching resource (optionr) and group (optiong),
    # if they match, print out required detail
    for key in ${GroupResourceQuotaList[@]}
    do
	#echo $key
	matched_group_flag=0
	matched_resource_flag=0
	matched_resourcegroup_flag=0
	currentgroupname=`echo $key | cut -d"." -f1`
	currentresourcename=`echo $key | cut -d"." -f2`
	if [ "$optiong" == "" ] || [ "$optiong" == "$currentgroupname" ]
	then
	    matched_group_flag=1
	else
	    continue
	fi
	# we need to match
	if [ "$optionr" == "" ] || [ "$optionr" == "$currentresourcename" ]
	then
	    matched_resource_flag=1
	else
	    continue
	fi
	# if we checked the dictionary, and the resource is in the dictionary
	optionGcontainsresource_flag=0
	ContainsResource $currentresourcename
	if [ "$optionG" == "" ] || [ $optionGcontainsresource_flag == 1 ]
	then
	    matched_resourcegroup_flag=1
	else
	    continue
	fi
	# the following condition satisfied
	# [ $matched_group_flag -eq 1 ] && [ $matched_resource_flag -eq 1 ] && [ $matched_resourcegroup_flag - eq 1 ]
	    # that means all of the three options match, then we need to print out information
	    # we surely print out the group name and resource name
	echo Group: $currentgroupname    Resource: $currentresourcename
	if [ $optionq -eq 1 ]
	then
	    local currentquota=`echo $key | cut -d"." -f3`
	    local currentquotaMB=`echo $key | cut -d"." -f4`
	    local usedbytes=`echo $key | cut -d"." -f5`
	    local usedMB=`echo $key | cut -d"." -f6`
	    echo "Quota: $currentquotaMB MB ($currentquota bytes(s)) Used:$usedMB MB ($usedbytes byte(s))"
	fi
	if [ $options -eq 1 ]
	then
	    getResourceStatus $currentresourcename
	fi
	if [ $optionm -eq 1 ]
	then
	    getResourceSURL $currentresourcename
	    getGroupResourceEndPath $currentgroupname $currentresourcename
	fi
	# new line
	echo 
    done
}

main